// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
 provider = "postgresql"
 url = env("DATABASE_URL")
}

generator client {
 provider = "prisma-client-js"
}

// Custom scheme below this line

// https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference
// https://vercel.com/guides/nextjs-prisma-postgres
// https://www.prisma.io/docs/guides/database/developing-with-prisma-migrate#first-migration-initialize-migration-history
// https://www.prisma.io/docs/concepts/components/prisma-client/crud

model ImageCollection {
 id Int @default(autoincrement()) @id
 images ComicImage[]
 issues ComicIssue[]
}

model ComicImage {
 id Int @default(autoincrement()) @id
 imageUrl String @db.VarChar(2048) @unique 
 collections ImageCollection[]
 series ComicSeries[]
 arcs ComicArc[]
 issues ComicIssue[]
}

model ComicSeries {
 id Int @default(autoincrement()) @id
 title String @db.VarChar(500) @unique 
 coverImageId Int?
 coverImage ComicImage? @relation(fields: [coverImageId], references: [id])
 startCoverDate DateTime @db.Date
 endCoverDate DateTime? @db.Date
 description String @db.VarChar(50000)
 link String
 issues ComicIssue[]
}

model ComicArc {
 id Int @default(autoincrement()) @id
 title String @db.VarChar(500) @unique
 coverImageId Int?
 coverImage ComicImage? @relation(fields: [coverImageId], references: [id])
 startCoverDate DateTime @db.Date
 endCoverDate DateTime? @db.Date
 link String
 description String @db.VarChar(50000)
 issues ComicIssue[]
}

model ComicIssue {
 id Int @default(autoincrement()) @id
 title String @db.VarChar(500)
 coverImageId Int?
 coverImage ComicImage? @relation(fields: [coverImageId], references: [id])
 coverDate DateTime @db.Date
 number Int
 link String
 description String @db.VarChar(50000)
 arcId Int?
 arc ComicArc? @relation(fields: [arcId], references: [id])
 seriesId Int
 series ComicSeries @relation(fields: [seriesId], references: [id])
 imageCollectionId Int
 imageCollection ImageCollection @relation(fields: [imageCollectionId], references: [id])
}

